(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_promql"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "pat_db4e4e9", None;
  "comment", None;
  "pat_on", None;
  "pat_or", None;
  "backtick_quoted_string", None;
  "pat_bool", None;
  "pat_by", None;
  "pat_and", None;
  "pat_dcab316", None;
  "pat_unless", None;
  "semgrep_metavariable", None;
  "pat_group_left", None;
  "pat_atan2", None;
  "pat_group_right", None;
  "double_quoted_string", None;
  "pat_with", None;
  "identifier", None;
  "single_quoted_string", None;
  "semgrep_ellipsis", None;
  "pat_igno", None;
  "pat_780550e", None;
  "at",
  Some (
    Seq [
      Token (Literal "@");
      Alt [|
        Token (Literal "start()");
        Token (Literal "end()");
        Token (Name "pat_dcab316");
      |];
    ];
  );
  "float_literal",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "pat_db4e4e9");
    |];
  );
  "function_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "label_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "metric_name",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "identifier");
    |];
  );
  "quoted_string",
  Some (
    Alt [|
      Token (Name "single_quoted_string");
      Token (Name "double_quoted_string");
      Token (Name "backtick_quoted_string");
    |];
  );
  "duration",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Repeat1 (
        Seq [
          Token (Name "pat_780550e");
          Alt [|
            Token (Literal "ms");
            Token (Literal "s");
            Token (Literal "m");
            Token (Literal "h");
            Token (Literal "d");
            Token (Literal "w");
            Token (Literal "y");
          |];
        ];
      );
    |];
  );
  "binary_grouping",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_on");
        Token (Name "pat_igno");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "label_name");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "label_name");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
      Opt (
        Seq [
          Alt [|
            Token (Name "pat_group_left");
            Token (Name "pat_group_right");
          |];
          Opt (
            Seq [
              Token (Literal "(");
              Opt (
                Seq [
                  Token (Name "label_name");
                  Repeat (
                    Seq [
                      Token (Literal ",");
                      Token (Name "label_name");
                    ];
                  );
                  Opt (
                    Token (Literal ",");
                  );
                ];
              );
              Token (Literal ")");
            ];
          );
        ];
      );
    ];
  );
  "grouping",
  Some (
    Seq [
      Alt [|
        Token (Name "pat_by");
        Token (Name "pat_with");
      |];
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "semgrep_ellipsis");
            Token (Name "label_name");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "semgrep_ellipsis");
                Token (Name "label_name");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "label_value",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "quoted_string");
    |];
  );
  "string_literal",
  Some (
    Alt [|
      Token (Name "semgrep_metavariable");
      Token (Name "quoted_string");
    |];
  );
  "range_selection",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "duration");
      Token (Literal "]");
    ];
  );
  "offset",
  Some (
    Seq [
      Token (Literal "offset");
      Opt (
        Token (Literal "-");
      );
      Token (Name "duration");
    ];
  );
  "subquery_range_selection",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "duration");
      Token (Literal ":");
      Opt (
        Token (Name "duration");
      );
      Token (Literal "]");
    ];
  );
  "label_matcher",
  Some (
    Seq [
      Token (Name "label_name");
      Alt [|
        Token (Literal "=");
        Token (Literal "!=");
        Token (Literal "=~");
        Token (Literal "!~");
      |];
      Token (Name "label_value");
    ];
  );
  "literal_expression",
  Some (
    Alt [|
      Token (Name "float_literal");
      Token (Name "string_literal");
    |];
  );
  "modifier",
  Some (
    Alt [|
      Seq [
        Token (Name "offset");
        Opt (
          Token (Name "at");
        );
      ];
      Seq [
        Token (Name "at");
        Opt (
          Token (Name "offset");
        );
      ];
    |];
  );
  "label_selectors",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Alt [|
            Token (Name "semgrep_ellipsis");
            Token (Name "label_matcher");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "semgrep_ellipsis");
                Token (Name "label_matcher");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "series_matcher",
  Some (
    Alt [|
      Token (Name "metric_name");
      Token (Name "label_selectors");
      Seq [
        Token (Name "metric_name");
        Token (Name "label_selectors");
      ];
    |];
  );
  "instant_vector_selector",
  Some (
    Seq [
      Token (Name "series_matcher");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "range_vector_selector",
  Some (
    Seq [
      Token (Name "series_matcher");
      Token (Name "range_selection");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "selector_expression",
  Some (
    Alt [|
      Token (Name "instant_vector_selector");
      Token (Name "range_vector_selector");
    |];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "^");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "*");
          Token (Literal "/");
          Token (Literal "%");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "+");
          Token (Literal "-");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Literal "==");
          Token (Literal "!=");
          Token (Literal ">");
          Token (Literal ">=");
          Token (Literal "<");
          Token (Literal "<=");
        |];
        Opt (
          Token (Name "pat_bool");
        );
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Name "pat_and");
          Token (Name "pat_or");
          Token (Name "pat_unless");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
      Seq [
        Token (Name "query");
        Alt [|
          Token (Name "pat_atan2");
        |];
        Opt (
          Token (Name "binary_grouping");
        );
        Token (Name "query");
      ];
    |];
  );
  "call_expression", Some (Token (Name "function_call"););
  "function_args",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Token (Name "query");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "query");
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "function_call",
  Some (
    Alt [|
      Seq [
        Token (Name "function_name");
        Token (Name "function_args");
      ];
      Seq [
        Token (Name "function_name");
        Token (Name "grouping");
        Token (Name "function_args");
      ];
      Seq [
        Token (Name "function_name");
        Token (Name "function_args");
        Token (Name "grouping");
      ];
    |];
  );
  "operator_expression",
  Some (
    Token (Name "binary_expression");
  );
  "query",
  Some (
    Alt [|
      Token (Name "query_expression");
      Seq [
        Token (Literal "(");
        Token (Name "query_expression");
        Token (Literal ")");
      ];
    |];
  );
  "query_expression",
  Some (
    Alt [|
      Token (Name "semgrep_ellipsis");
      Alt [|
        Token (Name "literal_expression");
        Token (Name "selector_expression");
        Token (Name "call_expression");
        Token (Name "operator_expression");
        Token (Name "subquery_expression");
      |];
    |];
  );
  "subquery",
  Some (
    Seq [
      Token (Name "query");
      Token (Name "subquery_range_selection");
      Opt (
        Token (Name "modifier");
      );
    ];
  );
  "subquery_expression", Some (Token (Name "subquery"););
  "query_", Some (Token (Name "query"););
]

let trans_pat_db4e4e9 ((kind, body) : mt) : CST.pat_db4e4e9 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_on ((kind, body) : mt) : CST.pat_on =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_or ((kind, body) : mt) : CST.pat_or =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_backtick_quoted_string ((kind, body) : mt) : CST.backtick_quoted_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_bool ((kind, body) : mt) : CST.pat_bool =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_by ((kind, body) : mt) : CST.pat_by =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_and ((kind, body) : mt) : CST.pat_and =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_dcab316 ((kind, body) : mt) : CST.pat_dcab316 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_unless ((kind, body) : mt) : CST.pat_unless =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_metavariable ((kind, body) : mt) : CST.semgrep_metavariable =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_group_left ((kind, body) : mt) : CST.pat_group_left =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_atan2 ((kind, body) : mt) : CST.pat_atan2 =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_group_right ((kind, body) : mt) : CST.pat_group_right =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_double_quoted_string ((kind, body) : mt) : CST.double_quoted_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_with ((kind, body) : mt) : CST.pat_with =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_single_quoted_string ((kind, body) : mt) : CST.single_quoted_string =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_semgrep_ellipsis ((kind, body) : mt) : CST.semgrep_ellipsis =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_igno ((kind, body) : mt) : CST.pat_igno =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_pat_780550e ((kind, body) : mt) : CST.pat_780550e =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_at ((kind, body) : mt) : CST.at =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Star (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `EndL (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Pat_dcab316 (
                  trans_pat_dcab316 (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_float_literal ((kind, body) : mt) : CST.float_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Pat_db4e4e9 (
            trans_pat_db4e4e9 (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_function_name ((kind, body) : mt) : CST.function_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_name ((kind, body) : mt) : CST.label_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_metric_name ((kind, body) : mt) : CST.metric_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_quoted_string ((kind, body) : mt) : CST.quoted_string =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Single_quoted_str (
            trans_single_quoted_string (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Double_quoted_str (
            trans_double_quoted_string (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Back_quoted_str (
            trans_backtick_quoted_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_duration ((kind, body) : mt) : CST.duration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Rep1_pat_780550e_choice_ms (
            Run.repeat1
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_pat_780550e (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Ms (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `S (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `M (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (3, v) ->
                          `H (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (4, v) ->
                          `D (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (5, v) ->
                          `W (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | Alt (6, v) ->
                          `Y (
                            Run.trans_token (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_binary_grouping ((kind, body) : mt) : CST.binary_grouping =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_on (
                  trans_pat_on (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_igno (
                  trans_pat_igno (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_label_name (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_label_name (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pat_group_left (
                            trans_pat_group_left (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Pat_group_right (
                            trans_pat_group_right (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.opt
                        (fun v ->
                          (match v with
                          | Seq [v0; v1; v2] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Seq [v0; v1; v2] ->
                                        (
                                          trans_label_name (Run.matcher_token v0),
                                          Run.repeat
                                            (fun v ->
                                              (match v with
                                              | Seq [v0; v1] ->
                                                  (
                                                    Run.trans_token (Run.matcher_token v0),
                                                    trans_label_name (Run.matcher_token v1)
                                                  )
                                              | _ -> assert false
                                              )
                                            )
                                            v1
                                          ,
                                          Run.opt
                                            (fun v -> Run.trans_token (Run.matcher_token v))
                                            v2
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                                ,
                                Run.trans_token (Run.matcher_token v2)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v4
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_grouping ((kind, body) : mt) : CST.grouping =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Pat_by (
                  trans_pat_by (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Pat_with (
                  trans_pat_with (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Semg_ellips (
                            trans_semgrep_ellipsis (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Label_name (
                            trans_label_name (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Semg_ellips (
                                      trans_semgrep_ellipsis (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Label_name (
                                      trans_label_name (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_value ((kind, body) : mt) : CST.label_value =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_str (
            trans_quoted_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_literal ((kind, body) : mt) : CST.string_literal =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_meta (
            trans_semgrep_metavariable (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Quoted_str (
            trans_quoted_string (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_range_selection ((kind, body) : mt) : CST.range_selection =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_duration (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_offset ((kind, body) : mt) : CST.offset =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_duration (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_subquery_range_selection ((kind, body) : mt) : CST.subquery_range_selection =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_duration (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_duration (Run.matcher_token v))
              v3
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_matcher ((kind, body) : mt) : CST.label_matcher =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_label_name (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `EQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `BANGEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `EQTILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `BANGTILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_label_value (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_literal_expression ((kind, body) : mt) : CST.literal_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Float_lit (
            trans_float_literal (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Str_lit (
            trans_string_literal (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_modifier ((kind, body) : mt) : CST.modifier =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Offset_opt_at (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_offset (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_at (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `At_opt_offset (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_at (Run.matcher_token v0),
                  Run.opt
                    (fun v -> trans_offset (Run.matcher_token v))
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_label_selectors ((kind, body) : mt) : CST.label_selectors =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Semg_ellips (
                            trans_semgrep_ellipsis (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Label_matc (
                            trans_label_matcher (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Semg_ellips (
                                      trans_semgrep_ellipsis (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Label_matc (
                                      trans_label_matcher (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_series_matcher ((kind, body) : mt) : CST.series_matcher =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Metric_name (
            trans_metric_name (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Label_selecs (
            trans_label_selectors (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Metric_name_label_selecs (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_metric_name (Run.matcher_token v0),
                  trans_label_selectors (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_instant_vector_selector ((kind, body) : mt) : CST.instant_vector_selector =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_series_matcher (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_range_vector_selector ((kind, body) : mt) : CST.range_vector_selector =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_series_matcher (Run.matcher_token v0),
            trans_range_selection (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_selector_expression ((kind, body) : mt) : CST.selector_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Inst_vec_sele (
            trans_instant_vector_selector (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Range_vec_sele (
            trans_range_vector_selector (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Query_choice_HAT_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `HAT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Query_choice_STAR_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `SLASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `PERC (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Query_choice_PLUS_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Query_choice_EQEQ_opt_pat_bool_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3; v4] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `EQEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `BANGEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `GT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `GTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `LT (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (5, v) ->
                      `LTEQ (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_pat_bool (Run.matcher_token v))
                    v2
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v3
                  ,
                  trans_query (Run.matcher_token v4)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Query_choice_pat_and_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Pat_and (
                        trans_pat_and (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Pat_or (
                        trans_pat_or (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Pat_unless (
                        trans_pat_unless (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Query_choice_pat_atan2_opt_bin_grou_query (
            (match v with
            | Seq [v0; v1; v2; v3] ->
                (
                  trans_query (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Pat_atan2 (
                        trans_pat_atan2 (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  Run.opt
                    (fun v -> trans_binary_grouping (Run.matcher_token v))
                    v2
                  ,
                  trans_query (Run.matcher_token v3)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      trans_function_call (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_function_args ((kind, body) : mt) : CST.function_args =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      trans_query (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_query (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_call ((kind, body) : mt) : CST.function_call =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Func_name_func_args (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_function_name (Run.matcher_token v0),
                  trans_function_args (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Func_name_grou_func_args (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_function_name (Run.matcher_token v0),
                  trans_grouping (Run.matcher_token v1),
                  trans_function_args (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Func_name_func_args_grou (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_function_name (Run.matcher_token v0),
                  trans_function_args (Run.matcher_token v1),
                  trans_grouping (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_operator_expression ((kind, body) : mt) : CST.operator_expression =
  match body with
  | Children v ->
      trans_binary_expression (Run.matcher_token v)
  | Leaf _ -> assert false

and trans_query ((kind, body) : mt) : CST.query =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Query_exp (
            trans_query_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `LPAR_query_exp_RPAR (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  trans_query_expression (Run.matcher_token v1),
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_query_expression ((kind, body) : mt) : CST.query_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Semg_ellips (
            trans_semgrep_ellipsis (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_lit_exp (
            (match v with
            | Alt (0, v) ->
                `Lit_exp (
                  trans_literal_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Sele_exp (
                  trans_selector_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Call_exp (
                  trans_call_expression (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Op_exp (
                  trans_operator_expression (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Subq_exp (
                  trans_subquery_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subquery ((kind, body) : mt) : CST.subquery =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_query (Run.matcher_token v0),
            trans_subquery_range_selection (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_modifier (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subquery_expression ((kind, body) : mt) : CST.subquery_expression =
  match body with
  | Children v ->
      trans_subquery (Run.matcher_token v)
  | Leaf _ -> assert false

let trans_query_ ((kind, body) : mt) : CST.query_ =
  match body with
  | Children v ->
      trans_query (Run.matcher_token v)
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_query_

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

